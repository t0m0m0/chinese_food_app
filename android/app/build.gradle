plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace = "com.example.chinese_food_app"
    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    defaultConfig {
        applicationId = "com.example.chinese_food_app"
        minSdk = 21
        targetSdk = 35
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        
        // Google Maps APIキーを環境変数から取得、なければダミーキーを使用
        def googleMapsApiKey = System.getenv("GOOGLE_MAPS_API_KEY") ?: "AIzaSyDUMMY_KEY_FOR_CI_ENVIRONMENT"
        resValue "string", "google_maps_api_key", googleMapsApiKey
    }

    signingConfigs {
        release {
            // リリース用署名設定
            // 本番リリース時は以下の環境変数を設定すること:
            // RELEASE_STORE_FILE, RELEASE_KEY_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD
            if (System.getenv("RELEASE_STORE_FILE") != null) {
                storeFile file(System.getenv("RELEASE_STORE_FILE"))
                keyAlias System.getenv("RELEASE_KEY_ALIAS")
                storePassword System.getenv("RELEASE_STORE_PASSWORD")
                keyPassword System.getenv("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        debug {
            // デバッグビルドはデバッグ証明書を使用
            signingConfig = signingConfigs.debug
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
        release {
            // リリースビルド設定
            // 環境変数が設定されていればリリース証明書を使用、そうでなければデバッグ証明書
            signingConfig = System.getenv("RELEASE_STORE_FILE") != null
                ? signingConfigs.release
                : signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // 本番リリース時の署名チェック
            doFirst {
                if (signingConfig == signingConfigs.debug) {
                    logger.warn("⚠️  リリースビルドですがデバッグ証明書を使用しています")
                    logger.warn("   本番リリースには環境変数でリリース証明書を設定してください:")
                    logger.warn("   RELEASE_STORE_FILE, RELEASE_KEY_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD")
                }
            }
        }
    }
}

configurations.all {
    resolutionStrategy {
        force 'org.jetbrains.kotlin:kotlin-stdlib:1.9.10'
        force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10'
    }
}

flutter {
    source = "../.."
}