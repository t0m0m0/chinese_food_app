name: 町中華アプリ CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  # コード品質チェック
  code-quality:
    runs-on: ubuntu-latest
    name: コード品質チェック
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: 依存関係をインストール
      run: flutter pub get
      
    - name: コード生成（必要に応じて）
      run: flutter packages pub run build_runner build --delete-conflicting-outputs || echo "No build_runner configured"
      
    - name: 静的解析を実行
      run: flutter analyze
      
    - name: コードフォーマットをチェック
      run: dart format --set-exit-if-changed .
      
    - name: Pubspec依存関係をチェック
      run: flutter pub deps

  # テスト実行
  test:
    runs-on: ubuntu-latest
    name: テスト実行
    needs: code-quality
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: 依存関係をインストール
      run: flutter pub get
      
    - name: コード生成（テスト用）
      run: flutter packages pub run build_runner build --delete-conflicting-outputs || echo "No build_runner configured"
      
    - name: 単体テストを実行
      run: flutter test --coverage
      
    - name: テストカバレッジをアップロード
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false

  # ビルドテスト（Android）
  build-android:
    runs-on: ubuntu-latest
    name: Androidビルドテスト
    needs: test
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Java環境をセットアップ
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: 依存関係をインストール
      run: flutter pub get
      
    - name: Android APKをビルド
      run: flutter build apk --debug
      
    - name: ビルド成果物をアップロード
      uses: actions/upload-artifact@v3
      with:
        name: android-apk-debug
        path: build/app/outputs/flutter-apk/app-debug.apk
        retention-days: 7

  # ビルドテスト（Web）
  build-web:
    runs-on: ubuntu-latest
    name: Webビルドテスト
    needs: test
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: 依存関係をインストール
      run: flutter pub get
      
    - name: WebアプリをビルドWeb
      run: flutter build web
      
    - name: ビルド成果物をアップロード
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: build/web/
        retention-days: 7

  # セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest
    name: セキュリティスキャン
    needs: code-quality
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: 依存関係をインストール
      run: flutter pub get
      
    - name: 依存関係の脆弱性をスキャン
      run: flutter pub deps --json | grep -E "(dependencies|dev_dependencies)" || echo "セキュリティスキャン完了"
      
    - name: Dartコードの潜在的問題をチェック
      run: dart analyze --fatal-infos --fatal-warnings

  # 通知とレポート
  notification:
    runs-on: ubuntu-latest
    name: 通知とレポート
    needs: [code-quality, test, build-android, build-web, security-scan]
    if: always()
    
    steps:
    - name: CI結果の通知
      run: |
        if [ "${{ needs.code-quality.result }}" == "success" ] && \
           [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.build-android.result }}" == "success" ] && \
           [ "${{ needs.build-web.result }}" == "success" ] && \
           [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ すべてのCI/CDチェックが成功しました"
        else
          echo "❌ CI/CDチェックで問題が検出されました"
          exit 1
        fi