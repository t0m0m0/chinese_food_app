// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/helpers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:convert' as _i29;
import 'dart:io' as _i12;
import 'dart:typed_data' as _i30;
import 'dart:ui' as _i23;

import 'package:chinese_food_app/core/network/api_response.dart' as _i7;
import 'package:chinese_food_app/core/network/app_http_client.dart' as _i28;
import 'package:chinese_food_app/core/services/photo_service.dart' as _i11;
import 'package:chinese_food_app/core/types/result.dart' as _i17;
import 'package:chinese_food_app/data/datasources/hotpepper_api_datasource.dart'
    as _i24;
import 'package:chinese_food_app/data/datasources/hotpepper_proxy_datasource.dart'
    as _i25;
import 'package:chinese_food_app/data/datasources/photo_local_datasource.dart'
    as _i27;
import 'package:chinese_food_app/data/datasources/store_local_datasource.dart'
    as _i26;
import 'package:chinese_food_app/data/models/hotpepper_store_model.dart' as _i6;
import 'package:chinese_food_app/data/services/geolocator_location_service.dart'
    as _i13;
import 'package:chinese_food_app/domain/entities/location.dart' as _i2;
import 'package:chinese_food_app/domain/entities/photo.dart' as _i21;
import 'package:chinese_food_app/domain/entities/store.dart' as _i15;
import 'package:chinese_food_app/domain/entities/visit_record.dart' as _i3;
import 'package:chinese_food_app/domain/repositories/location_repository.dart'
    as _i16;
import 'package:chinese_food_app/domain/repositories/photo_repository.dart'
    as _i20;
import 'package:chinese_food_app/domain/repositories/store_repository.dart'
    as _i4;
import 'package:chinese_food_app/domain/repositories/visit_record_repository.dart'
    as _i19;
import 'package:chinese_food_app/domain/services/location_service.dart' as _i9;
import 'package:chinese_food_app/domain/usecases/search_stores_usecase.dart'
    as _i5;
import 'package:chinese_food_app/presentation/providers/store_provider.dart'
    as _i22;
import 'package:geolocator/geolocator.dart' as _i14;
import 'package:http/http.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocation_0 extends _i1.SmartFake implements _i2.Location {
  _FakeLocation_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisitRecord_1 extends _i1.SmartFake implements _i3.VisitRecord {
  _FakeVisitRecord_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStoreRepository_2 extends _i1.SmartFake
    implements _i4.StoreRepository {
  _FakeStoreRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchStoresResult_3 extends _i1.SmartFake
    implements _i5.SearchStoresResult {
  _FakeSearchStoresResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotpepperSearchResponse_4 extends _i1.SmartFake
    implements _i6.HotpepperSearchResponse {
  _FakeHotpepperSearchResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_5 extends _i1.SmartFake implements Duration {
  _FakeDuration_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_6 extends _i1.SmartFake implements _i7.ApiResponse {
  _FakeApiResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_7 extends _i1.SmartFake implements _i8.Response {
  _FakeResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_8 extends _i1.SmartFake
    implements _i8.StreamedResponse {
  _FakeStreamedResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i9.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Location> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i10.Future<_i2.Location>.value(_FakeLocation_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i10.Future<_i2.Location>);

  @override
  _i10.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<bool> hasLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasLocationPermission,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<bool> requestLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
}

/// A class which mocks [PhotoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoService extends _i1.Mock implements _i11.PhotoService {
  MockPhotoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i12.File?> takePhotoFromCamera() => (super.noSuchMethod(
        Invocation.method(
          #takePhotoFromCamera,
          [],
        ),
        returnValue: _i10.Future<_i12.File?>.value(),
      ) as _i10.Future<_i12.File?>);

  @override
  _i10.Future<_i12.File?> pickPhotoFromGallery() => (super.noSuchMethod(
        Invocation.method(
          #pickPhotoFromGallery,
          [],
        ),
        returnValue: _i10.Future<_i12.File?>.value(),
      ) as _i10.Future<_i12.File?>);

  @override
  _i10.Future<_i12.File?> showPhotoSelectionDialog({
    required bool? allowCamera,
    required bool? allowGallery,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showPhotoSelectionDialog,
          [],
          {
            #allowCamera: allowCamera,
            #allowGallery: allowGallery,
          },
        ),
        returnValue: _i10.Future<_i12.File?>.value(),
      ) as _i10.Future<_i12.File?>);
}

/// A class which mocks [GeolocatorLocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorLocationService extends _i1.Mock
    implements _i13.GeolocatorLocationService {
  MockGeolocatorLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get timeoutSeconds => (super.noSuchMethod(
        Invocation.getter(#timeoutSeconds),
        returnValue: 0,
      ) as int);

  @override
  _i14.LocationAccuracy get accuracy => (super.noSuchMethod(
        Invocation.getter(#accuracy),
        returnValue: _i14.LocationAccuracy.lowest,
      ) as _i14.LocationAccuracy);

  @override
  _i10.Future<_i2.Location> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i10.Future<_i2.Location>.value(_FakeLocation_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i10.Future<_i2.Location>);

  @override
  _i10.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<bool> hasLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasLocationPermission,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<bool> requestLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i2.Location convertPositionToLocation(_i14.Position? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertPositionToLocation,
          [position],
        ),
        returnValue: _FakeLocation_0(
          this,
          Invocation.method(
            #convertPositionToLocation,
            [position],
          ),
        ),
      ) as _i2.Location);
}

/// A class which mocks [StoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreRepository extends _i1.Mock implements _i4.StoreRepository {
  MockStoreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i15.Store>> getAllStores() => (super.noSuchMethod(
        Invocation.method(
          #getAllStores,
          [],
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<List<_i15.Store>> getStoresByStatus(_i15.StoreStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoresByStatus,
          [status],
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<_i15.Store?> getStoreById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStoreById,
          [id],
        ),
        returnValue: _i10.Future<_i15.Store?>.value(),
      ) as _i10.Future<_i15.Store?>);

  @override
  _i10.Future<void> insertStore(_i15.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #insertStore,
          [store],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updateStore(_i15.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #updateStore,
          [store],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deleteStore(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteStore,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<List<_i15.Store>> searchStores(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [query],
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<List<_i15.Store>> searchStoresFromApi({
    double? lat,
    double? lng,
    String? address,
    String? keyword,
    int? range = 3,
    int? count = 20,
    int? start = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStoresFromApi,
          [],
          {
            #lat: lat,
            #lng: lng,
            #address: address,
            #keyword: keyword,
            #range: range,
            #count: count,
            #start: start,
          },
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);
}

/// A class which mocks [LocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepository extends _i1.Mock
    implements _i16.LocationRepository {
  MockLocationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i17.Result<_i2.Location>> getCurrentLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i10.Future<_i17.Result<_i2.Location>>.value(
            _i18.dummyValue<_i17.Result<_i2.Location>>(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i10.Future<_i17.Result<_i2.Location>>);
}

/// A class which mocks [VisitRecordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitRecordRepository extends _i1.Mock
    implements _i19.VisitRecordRepository {
  MockVisitRecordRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i3.VisitRecord>> getAllVisitRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllVisitRecords,
          [],
        ),
        returnValue:
            _i10.Future<List<_i3.VisitRecord>>.value(<_i3.VisitRecord>[]),
      ) as _i10.Future<List<_i3.VisitRecord>>);

  @override
  _i10.Future<List<_i3.VisitRecord>> getVisitRecordsByStoreId(
          String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitRecordsByStoreId,
          [storeId],
        ),
        returnValue:
            _i10.Future<List<_i3.VisitRecord>>.value(<_i3.VisitRecord>[]),
      ) as _i10.Future<List<_i3.VisitRecord>>);

  @override
  _i10.Future<_i3.VisitRecord?> getVisitRecordById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitRecordById,
          [id],
        ),
        returnValue: _i10.Future<_i3.VisitRecord?>.value(),
      ) as _i10.Future<_i3.VisitRecord?>);

  @override
  _i10.Future<_i3.VisitRecord> insertVisitRecord(
          _i3.VisitRecord? visitRecord) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVisitRecord,
          [visitRecord],
        ),
        returnValue: _i10.Future<_i3.VisitRecord>.value(_FakeVisitRecord_1(
          this,
          Invocation.method(
            #insertVisitRecord,
            [visitRecord],
          ),
        )),
      ) as _i10.Future<_i3.VisitRecord>);

  @override
  _i10.Future<void> updateVisitRecord(_i3.VisitRecord? visitRecord) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisitRecord,
          [visitRecord],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deleteVisitRecord(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisitRecord,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i20.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i21.Photo>> getAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getAllPhotos,
          [],
        ),
        returnValue: _i10.Future<List<_i21.Photo>>.value(<_i21.Photo>[]),
      ) as _i10.Future<List<_i21.Photo>>);

  @override
  _i10.Future<List<_i21.Photo>> getPhotosByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByStoreId,
          [storeId],
        ),
        returnValue: _i10.Future<List<_i21.Photo>>.value(<_i21.Photo>[]),
      ) as _i10.Future<List<_i21.Photo>>);

  @override
  _i10.Future<List<_i21.Photo>> getPhotosByVisitId(String? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByVisitId,
          [visitId],
        ),
        returnValue: _i10.Future<List<_i21.Photo>>.value(<_i21.Photo>[]),
      ) as _i10.Future<List<_i21.Photo>>);

  @override
  _i10.Future<_i21.Photo?> getPhotoById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoById,
          [id],
        ),
        returnValue: _i10.Future<_i21.Photo?>.value(),
      ) as _i10.Future<_i21.Photo?>);

  @override
  _i10.Future<void> insertPhoto(_i21.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #insertPhoto,
          [photo],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updatePhoto(_i21.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #updatePhoto,
          [photo],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [SearchStoresUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchStoresUsecase extends _i1.Mock
    implements _i5.SearchStoresUsecase {
  MockSearchStoresUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.StoreRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStoreRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.StoreRepository);

  @override
  _i10.Future<_i5.SearchStoresResult> execute(_i5.SearchStoresParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [params],
        ),
        returnValue:
            _i10.Future<_i5.SearchStoresResult>.value(_FakeSearchStoresResult_3(
          this,
          Invocation.method(
            #execute,
            [params],
          ),
        )),
      ) as _i10.Future<_i5.SearchStoresResult>);
}

/// A class which mocks [StoreProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreProvider extends _i1.Mock implements _i22.StoreProvider {
  MockStoreProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  List<_i15.Store> get searchResults => (super.noSuchMethod(
        Invocation.getter(#searchResults),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  List<_i15.Store> get swipeStores => (super.noSuchMethod(
        Invocation.getter(#swipeStores),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  List<_i15.Store> get stores => (super.noSuchMethod(
        Invocation.getter(#stores),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  List<_i15.Store> get wantToGoStores => (super.noSuchMethod(
        Invocation.getter(#wantToGoStores),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  List<_i15.Store> get visitedStores => (super.noSuchMethod(
        Invocation.getter(#visitedStores),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  List<_i15.Store> get badStores => (super.noSuchMethod(
        Invocation.getter(#badStores),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  List<_i15.Store> get newStores => (super.noSuchMethod(
        Invocation.getter(#newStores),
        returnValue: <_i15.Store>[],
      ) as List<_i15.Store>);

  @override
  _i4.StoreRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeStoreRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.StoreRepository);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i10.Future<void> loadStores() => (super.noSuchMethod(
        Invocation.method(
          #loadStores,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updateStoreStatus(
    String? storeId,
    _i15.StoreStatus? newStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStoreStatus,
          [
            storeId,
            newStatus,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> addStore(_i15.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #addStore,
          [store],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshCache() => super.noSuchMethod(
        Invocation.method(
          #refreshCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> loadNewStoresFromApi({
    double? lat,
    double? lng,
    String? address,
    String? keyword = '中華',
    int? range = 3,
    int? count = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadNewStoresFromApi,
          [],
          {
            #lat: lat,
            #lng: lng,
            #address: address,
            #keyword: keyword,
            #range: range,
            #count: count,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> loadSwipeStores({
    required double? lat,
    required double? lng,
    int? range = 3,
    int? count = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSwipeStores,
          [],
          {
            #lat: lat,
            #lng: lng,
            #range: range,
            #count: count,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<bool> tryRecoverFromDatabaseError() => (super.noSuchMethod(
        Invocation.method(
          #tryRecoverFromDatabaseError,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i23.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i23.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HotpepperApiDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotpepperApiDatasource extends _i1.Mock
    implements _i24.HotpepperApiDatasource {
  MockHotpepperApiDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i6.HotpepperSearchResponse> searchStores({
    double? lat,
    double? lng,
    String? address,
    String? keyword,
    int? range = 3,
    int? count = 20,
    int? start = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [],
          {
            #lat: lat,
            #lng: lng,
            #address: address,
            #keyword: keyword,
            #range: range,
            #count: count,
            #start: start,
          },
        ),
        returnValue: _i10.Future<_i6.HotpepperSearchResponse>.value(
            _FakeHotpepperSearchResponse_4(
          this,
          Invocation.method(
            #searchStores,
            [],
            {
              #lat: lat,
              #lng: lng,
              #address: address,
              #keyword: keyword,
              #range: range,
              #count: count,
              #start: start,
            },
          ),
        )),
      ) as _i10.Future<_i6.HotpepperSearchResponse>);
}

/// A class which mocks [HotpepperProxyDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotpepperProxyDatasource extends _i1.Mock
    implements _i25.HotpepperProxyDatasource {
  MockHotpepperProxyDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i6.HotpepperSearchResponse> searchStores({
    double? lat,
    double? lng,
    String? address,
    String? keyword,
    int? range = 3,
    int? count = 20,
    int? start = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [],
          {
            #lat: lat,
            #lng: lng,
            #address: address,
            #keyword: keyword,
            #range: range,
            #count: count,
            #start: start,
          },
        ),
        returnValue: _i10.Future<_i6.HotpepperSearchResponse>.value(
            _FakeHotpepperSearchResponse_4(
          this,
          Invocation.method(
            #searchStores,
            [],
            {
              #lat: lat,
              #lng: lng,
              #address: address,
              #keyword: keyword,
              #range: range,
              #count: count,
              #start: start,
            },
          ),
        )),
      ) as _i10.Future<_i6.HotpepperSearchResponse>);
}

/// A class which mocks [StoreLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreLocalDatasource extends _i1.Mock
    implements _i26.StoreLocalDatasource {
  MockStoreLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> insertStore(_i15.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #insertStore,
          [store],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updateStore(_i15.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #updateStore,
          [store],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deleteStore(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteStore,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<_i15.Store?> getStoreById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStoreById,
          [id],
        ),
        returnValue: _i10.Future<_i15.Store?>.value(),
      ) as _i10.Future<_i15.Store?>);

  @override
  _i10.Future<List<_i15.Store>> getStoresByStatus(_i15.StoreStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoresByStatus,
          [status],
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<List<_i15.Store>> searchStores(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [query],
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<List<_i15.Store>> getAllStores() => (super.noSuchMethod(
        Invocation.method(
          #getAllStores,
          [],
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<void> insertStoresBatch(List<_i15.Store>? stores) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertStoresBatch,
          [stores],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updateStoreAtomic(_i15.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #updateStoreAtomic,
          [store],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<List<_i15.Store>> getStoresPaginated({
    required int? page,
    required int? pageSize,
    _i15.StoreStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoresPaginated,
          [],
          {
            #page: page,
            #pageSize: pageSize,
            #status: status,
          },
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);

  @override
  _i10.Future<List<_i15.Store>> searchStoresPaginated({
    required String? query,
    required int? page,
    required int? pageSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStoresPaginated,
          [],
          {
            #query: query,
            #page: page,
            #pageSize: pageSize,
          },
        ),
        returnValue: _i10.Future<List<_i15.Store>>.value(<_i15.Store>[]),
      ) as _i10.Future<List<_i15.Store>>);
}

/// A class which mocks [PhotoLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoLocalDatasource extends _i1.Mock
    implements _i27.PhotoLocalDatasource {
  MockPhotoLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> insertPhoto(_i21.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #insertPhoto,
          [photo],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<_i21.Photo?> getPhotoById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoById,
          [id],
        ),
        returnValue: _i10.Future<_i21.Photo?>.value(),
      ) as _i10.Future<_i21.Photo?>);

  @override
  _i10.Future<List<_i21.Photo>> getAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getAllPhotos,
          [],
        ),
        returnValue: _i10.Future<List<_i21.Photo>>.value(<_i21.Photo>[]),
      ) as _i10.Future<List<_i21.Photo>>);

  @override
  _i10.Future<List<_i21.Photo>> getPhotosByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByStoreId,
          [storeId],
        ),
        returnValue: _i10.Future<List<_i21.Photo>>.value(<_i21.Photo>[]),
      ) as _i10.Future<List<_i21.Photo>>);

  @override
  _i10.Future<List<_i21.Photo>> getPhotosByVisitId(String? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByVisitId,
          [visitId],
        ),
        returnValue: _i10.Future<List<_i21.Photo>>.value(<_i21.Photo>[]),
      ) as _i10.Future<List<_i21.Photo>>);

  @override
  _i10.Future<void> updatePhoto(_i21.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #updatePhoto,
          [photo],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [AppHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppHttpClient extends _i1.Mock implements _i28.AppHttpClient {
  MockAppHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_5(
          this,
          Invocation.getter(#timeout),
        ),
      ) as Duration);

  @override
  int get maxRetries => (super.noSuchMethod(
        Invocation.getter(#maxRetries),
        returnValue: 0,
      ) as int);

  @override
  Duration get retryDelay => (super.noSuchMethod(
        Invocation.getter(#retryDelay),
        returnValue: _FakeDuration_5(
          this,
          Invocation.getter(#retryDelay),
        ),
      ) as Duration);

  @override
  _i10.Future<_i7.ApiResponse> get(
    dynamic url, {
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i10.Future<_i7.ApiResponse>.value(_FakeApiResponse_6(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i10.Future<_i7.ApiResponse>);

  @override
  _i10.Future<_i7.ApiResponse> post(
    dynamic url, {
    dynamic body,
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #body: body,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i10.Future<_i7.ApiResponse>.value(_FakeApiResponse_6(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #body: body,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i10.Future<_i7.ApiResponse>);

  @override
  _i10.Future<_i7.ApiResponse> put(
    dynamic url, {
    dynamic body,
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #body: body,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i10.Future<_i7.ApiResponse>.value(_FakeApiResponse_6(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #body: body,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i10.Future<_i7.ApiResponse>);

  @override
  _i10.Future<_i7.ApiResponse> delete(
    dynamic url, {
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i10.Future<_i7.ApiResponse>.value(_FakeApiResponse_6(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i10.Future<_i7.ApiResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i8.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i8.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<_i8.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i10.Future<_i8.Response>);

  @override
  _i10.Future<_i8.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<_i8.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i10.Future<_i8.Response>);

  @override
  _i10.Future<_i8.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i29.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i8.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i8.Response>);

  @override
  _i10.Future<_i8.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i29.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i8.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i8.Response>);

  @override
  _i10.Future<_i8.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i29.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i8.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i8.Response>);

  @override
  _i10.Future<_i8.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i29.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i10.Future<_i8.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i10.Future<_i8.Response>);

  @override
  _i10.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i10.Future<String>);

  @override
  _i10.Future<_i30.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i10.Future<_i30.Uint8List>.value(_i30.Uint8List(0)),
      ) as _i10.Future<_i30.Uint8List>);

  @override
  _i10.Future<_i8.StreamedResponse> send(_i8.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i10.Future<_i8.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i10.Future<_i8.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
