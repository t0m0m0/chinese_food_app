// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/helpers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i21;
import 'dart:io' as _i9;
import 'dart:typed_data' as _i22;

import 'package:chinese_food_app/core/services/photo_service.dart' as _i8;
import 'package:chinese_food_app/core/types/result.dart' as _i13;
import 'package:chinese_food_app/data/datasources/hotpepper_api_datasource.dart'
    as _i18;
import 'package:chinese_food_app/data/datasources/photo_local_datasource.dart'
    as _i20;
import 'package:chinese_food_app/data/datasources/store_local_datasource.dart'
    as _i19;
import 'package:chinese_food_app/data/models/hotpepper_store_model.dart' as _i4;
import 'package:chinese_food_app/domain/entities/location.dart' as _i2;
import 'package:chinese_food_app/domain/entities/photo.dart' as _i17;
import 'package:chinese_food_app/domain/entities/store.dart' as _i11;
import 'package:chinese_food_app/domain/entities/visit_record.dart' as _i3;
import 'package:chinese_food_app/domain/repositories/location_repository.dart'
    as _i12;
import 'package:chinese_food_app/domain/repositories/photo_repository.dart'
    as _i16;
import 'package:chinese_food_app/domain/repositories/store_repository.dart'
    as _i10;
import 'package:chinese_food_app/domain/repositories/visit_record_repository.dart'
    as _i15;
import 'package:chinese_food_app/domain/services/location_service.dart' as _i6;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocation_0 extends _i1.SmartFake implements _i2.Location {
  _FakeLocation_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisitRecord_1 extends _i1.SmartFake implements _i3.VisitRecord {
  _FakeVisitRecord_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotpepperSearchResponse_2 extends _i1.SmartFake
    implements _i4.HotpepperSearchResponse {
  _FakeHotpepperSearchResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i6.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Location> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i7.Future<_i2.Location>.value(_FakeLocation_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Location>);

  @override
  _i7.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> hasLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasLocationPermission,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> requestLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [PhotoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoService extends _i1.Mock implements _i8.PhotoService {
  MockPhotoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i9.File?> takePhotoFromCamera() => (super.noSuchMethod(
        Invocation.method(
          #takePhotoFromCamera,
          [],
        ),
        returnValue: _i7.Future<_i9.File?>.value(),
      ) as _i7.Future<_i9.File?>);

  @override
  _i7.Future<_i9.File?> pickPhotoFromGallery() => (super.noSuchMethod(
        Invocation.method(
          #pickPhotoFromGallery,
          [],
        ),
        returnValue: _i7.Future<_i9.File?>.value(),
      ) as _i7.Future<_i9.File?>);

  @override
  _i7.Future<_i9.File?> showPhotoSelectionDialog({
    required bool? allowCamera,
    required bool? allowGallery,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showPhotoSelectionDialog,
          [],
          {
            #allowCamera: allowCamera,
            #allowGallery: allowGallery,
          },
        ),
        returnValue: _i7.Future<_i9.File?>.value(),
      ) as _i7.Future<_i9.File?>);
}

/// A class which mocks [StoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreRepository extends _i1.Mock implements _i10.StoreRepository {
  MockStoreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i11.Store>> getAllStores() => (super.noSuchMethod(
        Invocation.method(
          #getAllStores,
          [],
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);

  @override
  _i7.Future<List<_i11.Store>> getStoresByStatus(_i11.StoreStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoresByStatus,
          [status],
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);

  @override
  _i7.Future<_i11.Store?> getStoreById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStoreById,
          [id],
        ),
        returnValue: _i7.Future<_i11.Store?>.value(),
      ) as _i7.Future<_i11.Store?>);

  @override
  _i7.Future<void> insertStore(_i11.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #insertStore,
          [store],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateStore(_i11.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #updateStore,
          [store],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteStore(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteStore,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i11.Store>> searchStores(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [query],
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);

  @override
  _i7.Future<List<_i11.Store>> searchStoresFromApi({
    double? lat,
    double? lng,
    String? address,
    String? keyword,
    int? range = 3,
    int? count = 20,
    int? start = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStoresFromApi,
          [],
          {
            #lat: lat,
            #lng: lng,
            #address: address,
            #keyword: keyword,
            #range: range,
            #count: count,
            #start: start,
          },
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);
}

/// A class which mocks [LocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepository extends _i1.Mock
    implements _i12.LocationRepository {
  MockLocationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i13.Result<_i2.Location>> getCurrentLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i7.Future<_i13.Result<_i2.Location>>.value(
            _i14.dummyValue<_i13.Result<_i2.Location>>(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Result<_i2.Location>>);
}

/// A class which mocks [VisitRecordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitRecordRepository extends _i1.Mock
    implements _i15.VisitRecordRepository {
  MockVisitRecordRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i3.VisitRecord>> getAllVisitRecords() => (super.noSuchMethod(
        Invocation.method(
          #getAllVisitRecords,
          [],
        ),
        returnValue:
            _i7.Future<List<_i3.VisitRecord>>.value(<_i3.VisitRecord>[]),
      ) as _i7.Future<List<_i3.VisitRecord>>);

  @override
  _i7.Future<List<_i3.VisitRecord>> getVisitRecordsByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitRecordsByStoreId,
          [storeId],
        ),
        returnValue:
            _i7.Future<List<_i3.VisitRecord>>.value(<_i3.VisitRecord>[]),
      ) as _i7.Future<List<_i3.VisitRecord>>);

  @override
  _i7.Future<_i3.VisitRecord?> getVisitRecordById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitRecordById,
          [id],
        ),
        returnValue: _i7.Future<_i3.VisitRecord?>.value(),
      ) as _i7.Future<_i3.VisitRecord?>);

  @override
  _i7.Future<_i3.VisitRecord> insertVisitRecord(_i3.VisitRecord? visitRecord) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVisitRecord,
          [visitRecord],
        ),
        returnValue: _i7.Future<_i3.VisitRecord>.value(_FakeVisitRecord_1(
          this,
          Invocation.method(
            #insertVisitRecord,
            [visitRecord],
          ),
        )),
      ) as _i7.Future<_i3.VisitRecord>);

  @override
  _i7.Future<void> updateVisitRecord(_i3.VisitRecord? visitRecord) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisitRecord,
          [visitRecord],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteVisitRecord(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisitRecord,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i16.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i17.Photo>> getAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getAllPhotos,
          [],
        ),
        returnValue: _i7.Future<List<_i17.Photo>>.value(<_i17.Photo>[]),
      ) as _i7.Future<List<_i17.Photo>>);

  @override
  _i7.Future<List<_i17.Photo>> getPhotosByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByStoreId,
          [storeId],
        ),
        returnValue: _i7.Future<List<_i17.Photo>>.value(<_i17.Photo>[]),
      ) as _i7.Future<List<_i17.Photo>>);

  @override
  _i7.Future<List<_i17.Photo>> getPhotosByVisitId(String? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByVisitId,
          [visitId],
        ),
        returnValue: _i7.Future<List<_i17.Photo>>.value(<_i17.Photo>[]),
      ) as _i7.Future<List<_i17.Photo>>);

  @override
  _i7.Future<_i17.Photo?> getPhotoById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoById,
          [id],
        ),
        returnValue: _i7.Future<_i17.Photo?>.value(),
      ) as _i7.Future<_i17.Photo?>);

  @override
  _i7.Future<void> insertPhoto(_i17.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #insertPhoto,
          [photo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updatePhoto(_i17.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #updatePhoto,
          [photo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [HotpepperApiDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotpepperApiDatasource extends _i1.Mock
    implements _i18.HotpepperApiDatasource {
  MockHotpepperApiDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.HotpepperSearchResponse> searchStores({
    double? lat,
    double? lng,
    String? address,
    String? keyword,
    int? range = 3,
    int? count = 20,
    int? start = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [],
          {
            #lat: lat,
            #lng: lng,
            #address: address,
            #keyword: keyword,
            #range: range,
            #count: count,
            #start: start,
          },
        ),
        returnValue: _i7.Future<_i4.HotpepperSearchResponse>.value(
            _FakeHotpepperSearchResponse_2(
          this,
          Invocation.method(
            #searchStores,
            [],
            {
              #lat: lat,
              #lng: lng,
              #address: address,
              #keyword: keyword,
              #range: range,
              #count: count,
              #start: start,
            },
          ),
        )),
      ) as _i7.Future<_i4.HotpepperSearchResponse>);
}

/// A class which mocks [StoreLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreLocalDatasource extends _i1.Mock
    implements _i19.StoreLocalDatasource {
  MockStoreLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> insertStore(_i11.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #insertStore,
          [store],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateStore(_i11.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #updateStore,
          [store],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteStore(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteStore,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i11.Store?> getStoreById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStoreById,
          [id],
        ),
        returnValue: _i7.Future<_i11.Store?>.value(),
      ) as _i7.Future<_i11.Store?>);

  @override
  _i7.Future<List<_i11.Store>> getStoresByStatus(_i11.StoreStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoresByStatus,
          [status],
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);

  @override
  _i7.Future<List<_i11.Store>> searchStores(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [query],
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);

  @override
  _i7.Future<List<_i11.Store>> getAllStores() => (super.noSuchMethod(
        Invocation.method(
          #getAllStores,
          [],
        ),
        returnValue: _i7.Future<List<_i11.Store>>.value(<_i11.Store>[]),
      ) as _i7.Future<List<_i11.Store>>);
}

/// A class which mocks [PhotoLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoLocalDatasource extends _i1.Mock
    implements _i20.PhotoLocalDatasource {
  MockPhotoLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> insertPhoto(_i17.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #insertPhoto,
          [photo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i17.Photo?> getPhotoById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoById,
          [id],
        ),
        returnValue: _i7.Future<_i17.Photo?>.value(),
      ) as _i7.Future<_i17.Photo?>);

  @override
  _i7.Future<List<_i17.Photo>> getAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getAllPhotos,
          [],
        ),
        returnValue: _i7.Future<List<_i17.Photo>>.value(<_i17.Photo>[]),
      ) as _i7.Future<List<_i17.Photo>>);

  @override
  _i7.Future<List<_i17.Photo>> getPhotosByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByStoreId,
          [storeId],
        ),
        returnValue: _i7.Future<List<_i17.Photo>>.value(<_i17.Photo>[]),
      ) as _i7.Future<List<_i17.Photo>>);

  @override
  _i7.Future<List<_i17.Photo>> getPhotosByVisitId(String? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByVisitId,
          [visitId],
        ),
        returnValue: _i7.Future<List<_i17.Photo>>.value(<_i17.Photo>[]),
      ) as _i7.Future<List<_i17.Photo>>);

  @override
  _i7.Future<void> updatePhoto(_i17.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #updatePhoto,
          [photo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i22.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i22.Uint8List>.value(_i22.Uint8List(0)),
      ) as _i7.Future<_i22.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
