// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/unit/presentation/providers/photo_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chinese_food_app/domain/entities/photo.dart' as _i2;
import 'package:chinese_food_app/domain/repositories/photo_repository.dart'
    as _i3;
import 'package:chinese_food_app/domain/usecases/pick_image_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhoto_0 extends _i1.SmartFake implements _i2.Photo {
  _FakePhoto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i3.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Photo>> getAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getAllPhotos,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<List<_i2.Photo>> getPhotosByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByStoreId,
          [storeId],
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<List<_i2.Photo>> getPhotosByVisitId(String? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByVisitId,
          [visitId],
        ),
        returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]),
      ) as _i4.Future<List<_i2.Photo>>);

  @override
  _i4.Future<_i2.Photo?> getPhotoById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Photo?>.value(),
      ) as _i4.Future<_i2.Photo?>);

  @override
  _i4.Future<void> insertPhoto(_i2.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #insertPhoto,
          [photo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updatePhoto(_i2.Photo? photo) => (super.noSuchMethod(
        Invocation.method(
          #updatePhoto,
          [photo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PickImageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPickImageUsecase extends _i1.Mock implements _i5.PickImageUsecase {
  MockPickImageUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Photo> pickFromCamera(
    String? storeId, {
    String? visitId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFromCamera,
          [storeId],
          {#visitId: visitId},
        ),
        returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
          this,
          Invocation.method(
            #pickFromCamera,
            [storeId],
            {#visitId: visitId},
          ),
        )),
      ) as _i4.Future<_i2.Photo>);

  @override
  _i4.Future<_i2.Photo> pickFromGallery(
    String? storeId, {
    String? visitId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFromGallery,
          [storeId],
          {#visitId: visitId},
        ),
        returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
          this,
          Invocation.method(
            #pickFromGallery,
            [storeId],
            {#visitId: visitId},
          ),
        )),
      ) as _i4.Future<_i2.Photo>);
}
