// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/unit/domain/usecases/add_visit_record_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chinese_food_app/domain/entities/visit_record.dart' as _i2;
import 'package:chinese_food_app/domain/repositories/visit_record_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVisitRecord_0 extends _i1.SmartFake implements _i2.VisitRecord {
  _FakeVisitRecord_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VisitRecordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitRecordRepository extends _i1.Mock
    implements _i3.VisitRecordRepository {
  MockVisitRecordRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.VisitRecord>> getAllVisitRecords() => (super.noSuchMethod(
        Invocation.method(
          #getAllVisitRecords,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.VisitRecord>>.value(<_i2.VisitRecord>[]),
      ) as _i4.Future<List<_i2.VisitRecord>>);

  @override
  _i4.Future<List<_i2.VisitRecord>> getVisitRecordsByStoreId(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitRecordsByStoreId,
          [storeId],
        ),
        returnValue:
            _i4.Future<List<_i2.VisitRecord>>.value(<_i2.VisitRecord>[]),
      ) as _i4.Future<List<_i2.VisitRecord>>);

  @override
  _i4.Future<_i2.VisitRecord?> getVisitRecordById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitRecordById,
          [id],
        ),
        returnValue: _i4.Future<_i2.VisitRecord?>.value(),
      ) as _i4.Future<_i2.VisitRecord?>);

  @override
  _i4.Future<_i2.VisitRecord> insertVisitRecord(_i2.VisitRecord? visitRecord) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVisitRecord,
          [visitRecord],
        ),
        returnValue: _i4.Future<_i2.VisitRecord>.value(_FakeVisitRecord_0(
          this,
          Invocation.method(
            #insertVisitRecord,
            [visitRecord],
          ),
        )),
      ) as _i4.Future<_i2.VisitRecord>);

  @override
  _i4.Future<void> updateVisitRecord(_i2.VisitRecord? visitRecord) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisitRecord,
          [visitRecord],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteVisitRecord(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisitRecord,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
