// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/widget/pages/photo_list_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:chinese_food_app/domain/entities/photo.dart' as _i5;
import 'package:chinese_food_app/domain/repositories/photo_repository.dart'
    as _i2;
import 'package:chinese_food_app/domain/usecases/pick_image_usecase.dart'
    as _i3;
import 'package:chinese_food_app/presentation/providers/photo_provider.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhotoRepository_0 extends _i1.SmartFake
    implements _i2.PhotoRepository {
  _FakePhotoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePickImageUsecase_1 extends _i1.SmartFake
    implements _i3.PickImageUsecase {
  _FakePickImageUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhotoProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoProvider extends _i1.Mock implements _i4.PhotoProvider {
  MockPhotoProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PhotoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePhotoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PhotoRepository);

  @override
  _i3.PickImageUsecase get pickImageUsecase => (super.noSuchMethod(
        Invocation.getter(#pickImageUsecase),
        returnValue: _FakePickImageUsecase_1(
          this,
          Invocation.getter(#pickImageUsecase),
        ),
      ) as _i3.PickImageUsecase);

  @override
  List<_i5.Photo> get photos => (super.noSuchMethod(
        Invocation.getter(#photos),
        returnValue: <_i5.Photo>[],
      ) as List<_i5.Photo>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> loadPhotosByStoreId(String? storeId) => (super.noSuchMethod(
        Invocation.method(
          #loadPhotosByStoreId,
          [storeId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> loadPhotosByVisitId(String? visitId) => (super.noSuchMethod(
        Invocation.method(
          #loadPhotosByVisitId,
          [visitId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> loadAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #loadAllPhotos,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addPhotoFromCamera(
    String? storeId, {
    String? visitId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPhotoFromCamera,
          [storeId],
          {#visitId: visitId},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addPhotoFromGallery(
    String? storeId, {
    String? visitId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPhotoFromGallery,
          [storeId],
          {#visitId: visitId},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deletePhoto(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [photoId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setError(String? error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
