// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/widget/pages/my_menu_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:chinese_food_app/core/di/di_container_interface.dart' as _i6;
import 'package:chinese_food_app/domain/entities/visit_record.dart' as _i8;
import 'package:chinese_food_app/domain/services/location_service.dart' as _i3;
import 'package:chinese_food_app/domain/usecases/add_visit_record_usecase.dart'
    as _i4;
import 'package:chinese_food_app/domain/usecases/get_visit_records_by_store_id_usecase.dart'
    as _i5;
import 'package:chinese_food_app/presentation/providers/store_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStoreProvider_0 extends _i1.SmartFake implements _i2.StoreProvider {
  _FakeStoreProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationService_1 extends _i1.SmartFake
    implements _i3.LocationService {
  _FakeLocationService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddVisitRecordUsecase_2 extends _i1.SmartFake
    implements _i4.AddVisitRecordUsecase {
  _FakeAddVisitRecordUsecase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetVisitRecordsByStoreIdUsecase_3 extends _i1.SmartFake
    implements _i5.GetVisitRecordsByStoreIdUsecase {
  _FakeGetVisitRecordsByStoreIdUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DIContainerInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockDIContainerInterface extends _i1.Mock
    implements _i6.DIContainerInterface {
  MockDIContainerInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConfigured => (super.noSuchMethod(
        Invocation.getter(#isConfigured),
        returnValue: false,
      ) as bool);

  @override
  void configure() => super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void configureForEnvironment(_i6.Environment? environment) =>
      super.noSuchMethod(
        Invocation.method(
          #configureForEnvironment,
          [environment],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.StoreProvider getStoreProvider() => (super.noSuchMethod(
        Invocation.method(
          #getStoreProvider,
          [],
        ),
        returnValue: _FakeStoreProvider_0(
          this,
          Invocation.method(
            #getStoreProvider,
            [],
          ),
        ),
      ) as _i2.StoreProvider);

  @override
  _i3.LocationService getLocationService() => (super.noSuchMethod(
        Invocation.method(
          #getLocationService,
          [],
        ),
        returnValue: _FakeLocationService_1(
          this,
          Invocation.method(
            #getLocationService,
            [],
          ),
        ),
      ) as _i3.LocationService);

  @override
  _i4.AddVisitRecordUsecase getAddVisitRecordUsecase() => (super.noSuchMethod(
        Invocation.method(
          #getAddVisitRecordUsecase,
          [],
        ),
        returnValue: _FakeAddVisitRecordUsecase_2(
          this,
          Invocation.method(
            #getAddVisitRecordUsecase,
            [],
          ),
        ),
      ) as _i4.AddVisitRecordUsecase);

  @override
  _i5.GetVisitRecordsByStoreIdUsecase getGetVisitRecordsByStoreIdUsecase() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGetVisitRecordsByStoreIdUsecase,
          [],
        ),
        returnValue: _FakeGetVisitRecordsByStoreIdUsecase_3(
          this,
          Invocation.method(
            #getGetVisitRecordsByStoreIdUsecase,
            [],
          ),
        ),
      ) as _i5.GetVisitRecordsByStoreIdUsecase);

  @override
  void registerTestProvider(_i2.StoreProvider? provider) => super.noSuchMethod(
        Invocation.method(
          #registerTestProvider,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetVisitRecordsByStoreIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVisitRecordsByStoreIdUsecase extends _i1.Mock
    implements _i5.GetVisitRecordsByStoreIdUsecase {
  MockGetVisitRecordsByStoreIdUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i8.VisitRecord>> call(String? storeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [storeId],
        ),
        returnValue:
            _i7.Future<List<_i8.VisitRecord>>.value(<_i8.VisitRecord>[]),
      ) as _i7.Future<List<_i8.VisitRecord>>);
}
