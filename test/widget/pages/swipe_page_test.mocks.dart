// Mocks generated by Mockito 5.4.4 from annotations
// in chinese_food_app/test/widget/pages/swipe_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chinese_food_app/domain/entities/store.dart' as _i4;
import 'package:chinese_food_app/domain/repositories/store_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [StoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreRepository extends _i1.Mock implements _i2.StoreRepository {
  MockStoreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Store>> getAllStores() => (super.noSuchMethod(
        Invocation.method(
          #getAllStores,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Store>>.value(<_i4.Store>[]),
      ) as _i3.Future<List<_i4.Store>>);

  @override
  _i3.Future<List<_i4.Store>> getStoresByStatus(_i4.StoreStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoresByStatus,
          [status],
        ),
        returnValue: _i3.Future<List<_i4.Store>>.value(<_i4.Store>[]),
      ) as _i3.Future<List<_i4.Store>>);

  @override
  _i3.Future<_i4.Store?> getStoreById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStoreById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Store?>.value(),
      ) as _i3.Future<_i4.Store?>);

  @override
  _i3.Future<void> insertStore(_i4.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #insertStore,
          [store],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateStore(_i4.Store? store) => (super.noSuchMethod(
        Invocation.method(
          #updateStore,
          [store],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteStore(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteStore,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Store>> searchStores(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchStores,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.Store>>.value(<_i4.Store>[]),
      ) as _i3.Future<List<_i4.Store>>);
}
