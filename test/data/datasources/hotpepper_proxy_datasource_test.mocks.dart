// Mocks generated by Mockito 5.4.6 from annotations
// in chinese_food_app/test/data/datasources/hotpepper_proxy_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chinese_food_app/core/network/api_response.dart' as _i2;
import 'package:chinese_food_app/core/network/app_http_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_1 extends _i1.SmartFake implements _i2.ApiResponse {
  _FakeApiResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppHttpClient extends _i1.Mock implements _i3.AppHttpClient {
  MockAppHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#timeout),
        ),
      ) as Duration);

  @override
  int get maxRetries => (super.noSuchMethod(
        Invocation.getter(#maxRetries),
        returnValue: 0,
      ) as int);

  @override
  Duration get retryDelay => (super.noSuchMethod(
        Invocation.getter(#retryDelay),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#retryDelay),
        ),
      ) as Duration);

  @override
  _i4.Future<_i2.ApiResponse> get(
    dynamic url, {
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse>.value(_FakeApiResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse>);

  @override
  _i4.Future<_i2.ApiResponse> post(
    dynamic url, {
    dynamic body,
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #body: body,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse>.value(_FakeApiResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #body: body,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse>);

  @override
  _i4.Future<_i2.ApiResponse> put(
    dynamic url, {
    dynamic body,
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #body: body,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse>.value(_FakeApiResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #body: body,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse>);

  @override
  _i4.Future<_i2.ApiResponse> delete(
    dynamic url, {
    Map<String, String>? headers,
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse>.value(_FakeApiResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
